plugins {
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'application'
    id 'java'
}

group 'com.swehacker'
version '1.0-SNAPSHOT'
mainClassName = 'com.swehacker.devcompanion.DeveloperCompanion'

ext {
    appName = 'Developer Companion'
    appVersion = '1.0.0'
    vendor = 'Patrik Falk [Swehacker]'
    copyright = 'Copyright 2023, All rights reserved'
    appDescription = 'Tools usefull for everyday development.'
    archiveFileName = 'developer-companion.jar'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(19)
    }
}

jar {
    archiveFileName = 'developer-companion.jar'
    manifest {
        attributes 'Main-Class': 'com.swehacker.devcompanion.DeveloperCompanion'
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'org.openjfx.javafxplugin'

task copyDependencies(type: Copy) {
    dependsOn 'build'
    from configurations.runtimeClasspath
    into "${buildDir}/libs"
}

task packageosx(type: Exec) {
    dependsOn 'clean'
    dependsOn 'copyDependencies'

    commandLine "jpackage",
            "--input", "build/libs",
            "--dest", "build/distributions/",
            "--name", "${appName}",
            "--main-jar", "${archiveFileName}",
            "--main-class", "${mainClassName}",
            "--type", "dmg",
            "--icon", "images/app.icns",
            "--app-version", "${appVersion}",
            "--description", "${appDescription}",
            "--vendor", "${vendor}",
            "--copyright", "${copyright}"
}

task packagepkg(type: Exec) {
    dependsOn 'copyDependencies'

    commandLine "jpackage",
            "--input", "build/libs",
            "--dest", "build/distributions/",
            "--name", "${appName}",
            "--main-jar", "${archiveFileName}",
            "--main-class", "${mainClassName}",
            "--type", "pkg",
            "--icon", "images/app.icns",
            "--app-version", "${appVersion}",
            "--description", "${appDescription}",
            "--vendor", "${vendor}",
            "--copyright", "${copyright}",
            "--win-menu"
}

task packagedeb(type: Exec) {
    dependsOn 'copyDependencies'

    commandLine "jpackage",
            "--input", "build/libs",
            "--dest", "build/distributions/",
            "--name", "${appName}",
            "--main-jar", "${archiveFileName}",
            "--main-class", "${mainClassName}",
            "--type", "deb",
            "--icon", "images/app.icns",
            "--app-version", "${appVersion}",
            "--description", "${appDescription}",
            "--vendor", "${vendor}",
            "--copyright", "${copyright}",
            "--win-menu"
}

task packageexe(type: Exec) {
    dependsOn 'copyDependencies'

    commandLine "jpackage",
            "--input", "build/libs",
            "--dest", "build/distributions/",
            "--name", "${appName}",
            "--main-jar", "${archiveFileName}",
            "--main-class", "${mainClassName}",
            "--type", "exe",
            "--icon", "images/app.icns",
            "--app-version", "${appVersion}",
            "--description", "${appDescription}",
            "--vendor", "${vendor}",
            "--copyright", "${copyright}",
            "--win-menu"
}

task packagemsi(type: Exec) {
    dependsOn 'copyDependencies'

    commandLine "jpackage",
            "--input", "build/libs",
            "--dest", "build/distributions/",
            "--name", "${appName}",
            "--main-jar", "${archiveFileName}",
            "--main-class", "${mainClassName}",
            "--type", "msi",
            "--icon", "images/app.icns",
            "--app-version", "${appVersion}",
            "--description", "${appDescription}",
            "--vendor", "${vendor}",
            "--copyright", "${copyright}",
            "--win-menu"
}

task packageappimage(type: Exec) {
    dependsOn 'copyDependencies'

    commandLine "jpackage",
            "--input", "build/libs",
            "--dest", "build/distributions/",
            "--name", "${appName}",
            "--main-jar", "${archiveFileName}",
            "--main-class", "${mainClassName}",
            "--type", "app-image",
            "--icon", "images/app.icns",
            "--app-version", "${appVersion}",
            "--description", "${appDescription}",
            "--vendor", "${vendor}",
            "--copyright", "${copyright}"
}

def currentOS = org.gradle.internal.os.OperatingSystem.current()
def platform
if (currentOS.isWindows()) {
    platform = 'win'
} else if (currentOS.isLinux()) {
    platform = 'linux'
} else if (currentOS.isMacOsX()) {
    platform = 'mac'
}

dependencies {
    implementation "org.openjfx:javafx-base:19.0.2.1:${platform}"
    implementation "org.openjfx:javafx-graphics:19.0.2.1:${platform}"
    implementation "org.openjfx:javafx-controls:19.0.2.1:${platform}"
    implementation "org.openjfx:javafx-fxml:19.0.2.1:${platform}"
    implementation 'com.sun.mail:javax.mail:1.6.2'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'
    implementation 'org.jasypt:jasypt:1.9.3'

    implementation 'xerces:xercesImpl:2.12.2'
    implementation 'org.dom4j:dom4j:2.1.3'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.7.1'
}